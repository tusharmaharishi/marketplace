version: "2"
services:
  mysql:
    container_name: mysql
    image: mysql:5.7.17
    volumes:
      - ../db:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: $$3cureUS  # escapes the $ using $$
    networks:
      - main
  mysql-cmdline:
    container_name: mysql-cmdline
    image: mysql:5.7.17
    external_links:
      - mysql:db
    volumes:
      - ./script:/app
    command: bash -c "chmod 775 /app/makedb.sh && /app/makedb.sh"
    networks:
      - main
  model:
    image: tp33/django
    depends_on:
      - mysql
    container_name: model
    external_links:
      -  mysql:db
    volumes:
      - ./model:/app
    ports:
      - "8001:8000"
    command: bash -c "sleep 40; pip install -r requirements.txt && python manage.py makemigrations && python manage.py migrate && python manage.py test && python manage.py loaddata fixtures/db.json && mod_wsgi-express start-server --working-directory ./ --reload-on-changes ./model/wsgi.py --log-to-terminal"
    networks:
      - main
  exp:
    image: tp33/django
    depends_on:
      - mysql
    container_name: exp
    links:
      - model:model-api
      - kafka:kafka
      - es:es
    volumes:
      - ./exp:/app
    ports:
      - "8002:8000"
    command: bash -c "sleep 90; pip install -r requirements.txt && python manage.py test && mod_wsgi-express start-server --reload-on-changes ./exp/wsgi.py --log-to-terminal"
    networks:
      - main
  web:
    image: tp33/django
    depends_on:
      - mysql
    container_name: web
    links:
      - exp:exp-api
    ports:
      - "8000:8000"
    volumes:
      - ./web:/app
    command: bash -c "sleep 90; pip install -r requirements.txt && mod_wsgi-express start-server --reload-on-changes ./web/wsgi.py --log-to-terminal"
    networks:
      - main
  kafka:
    image: spotify/kafka
    container_name: kafka
    environment:
      ADVERTISED_HOST: kafka
      ADVERTISED_PORT: 9092
    hostname: kafka
    networks:
      - main
  es:
    image: elasticsearch:2.0
    container_name: es
    ports:
      - "9200:9200"
    networks:
      - main
  batch:
    image: tp33/django
    container_name: batch
    links:
      - kafka:kafka
      - es:es
    volumes:s
      - ./exp:/app
    command: bash -c "sleep 30; python ./api/indexer.py"
    networks:
      - main
  spark-master:
    image: gettyimages/spark
    command: bash -c "pip install -r requirements.txt; bin/spark-class org.apache.spark.deploy.master.Master -h spark-master"
    container_name: spark-master
    hostname: spark-master
    environment:
      MASTER: spark://spark-master:7077
      SPARK_CONF_DIR: /conf
    expose:
      - 7001
      - 7002
      - 7003
      - 7004
      - 7005
      - 7006
      - 7077
      - 6066
    ports:
      - 4040:4040
      - 6066:6066
      - 7077:7077
      - 8080:8080
    volumes:
      - ./data:/tmp/data
  spark-worker:
    image: gettyimages/spark
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    container_name: spark-worker
    hostname: spark-worker
    environment:
      SPARK_CONF_DIR: /conf
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 512m
      SPARK_WORKER_PORT: 8881
      SPARK_WORKER_WEBUI_PORT: 8081
    links:
      - spark-master
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - 8081:8081
    volumes:
      - ./data:/tmp/data
networks:
  main: